import std.mem

fun len(source: str) int {
    let i: int = 0
    let c: char = source[i]

    while c {
        i += 1
        c = source[i]
    }

    return i
}

fun len(integer: int) int {
    let i: int = 0

    if integer == 0 {
        return 1
    }

    while integer {
        integer /= 10
        i += 1
    }

    return i
}

fun cat(left: str, right: str) str {
    let left_length:  int = len(left)
    let right_length: int = len(right)
    let total_length: int = left_length + right_length
    
    let buffer: ptr = std.mem.alloc(total_length + 1)

    std.mem.copy(buffer, left, left_length)
    std.mem.copy(buffer + left_length, right, right_length)

    buffer[total_length] = 0

    return buffer
}

fun equals(left: str, right: str) int {
    let left_length:  int = len(left)
    let right_length: int = len(right)

    let i: int = 0
    let s: int = 0

    if right_length != left_length {
        return 0
    }

    while i < right_length {
        if right[i] == left[i] {
            s += 1
        }

        i += 1
    }

    return s == right_length
}

fun slice(source: str, start: int, stop: int) str {
    if start > stop {
        return slice(source, stop, start)
    }

    let destination: str = std.mem.alloc((stop - start) + 1)
    let i: int = start
    let j: int = 0

    while i < stop {
        destination[j] = source[i]
        i += 1
        j += 1
    }

    destination[j] = 0

    return destination
}

fun to_decimal(integer: int) str {
    let integer_length: int = len(integer)
    let buffer: str = std.mem.alloc(integer_length + 1)

    if integer == 0 {
        buffer[0] = 48
        buffer[1] = 0

        return buffer
    }

    let i: int = integer_length

    buffer[i] = 0

    while integer {
        i -= 1
        buffer[i] = 48 + (integer % 10)
        integer /= 10
    }

    return buffer
}